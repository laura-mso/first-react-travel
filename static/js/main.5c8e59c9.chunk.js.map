{"version":3,"sources":["travellocation.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Location","_ref","destination","country","photo","distance","react_default","a","createElement","src","alt","App","className","logo","travellocation","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAYeA,SAVE,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAaC,EAAhBF,EAAgBE,QAASC,EAAzBH,EAAyBG,MAAOC,EAAhCJ,EAAgCI,SAAhC,OAChBC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAOM,IAAKR,IACtBI,EAAAC,EAAAC,cAAA,SAAIH,EAAJ,mBACAC,EAAAC,EAAAC,cAAA,cC6BaG,mLA7Bb,OACCL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACdN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,cACjBN,EAAAC,EAAAC,cAAA,MAAII,UAAU,aAAd,mBACAN,EAAAC,EAAAC,cAAA,OAAKC,IAAKI,IAAMD,UAAU,WAAWF,IAAI,UAE1CJ,EAAAC,EAAAC,cAACM,EAAD,CACCZ,YAAY,6BACZC,QAAQ,UACRC,MAAM,uTACNC,SAAS,SAEVC,EAAAC,EAAAC,cAACM,EAAD,CACCZ,YAAY,wBACZC,QAAQ,QACRC,MAAM,uTACNC,SAAS,SAEVC,EAAAC,EAAAC,cAACM,EAAD,CACCZ,YAAY,oBACZC,QAAQ,UACRC,MAAM,uTACNC,SAAS,iBAxBIU,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.5c8e59c9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Location = ({ destination, country, photo, distance }) => (\n\t<div>\n\t\t<h2>{destination}</h2>\n\t\t<h3>{country}</h3>\n\t\t<img src={photo} alt={destination} />\n\t\t<p>{distance} km from Berlin</p>\n\t\t<hr />\n\t</div>\n);\n\nexport default Location;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Location from './travellocation';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1 className=\"App-title\">Laura's Travels</h1>\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t</header>\n\t\t\t\t<Location\n\t\t\t\t\tdestination=\"Sunwaves Festival (Mamaia)\"\n\t\t\t\t\tcountry=\"Romania\"\n\t\t\t\t\tphoto=\"https://scontent.ffra1-1.fna.fbcdn.net/v/t1.0-9/31727846_10216616021338557_7283916495636135936_o.jpg?_nc_cat=106&_nc_eui2=AeGx9w2ZvDo2dY-YfUiGPdfh_TjtSwG0_ZWbV5cqVImQdTDq5EfthipTb4ACUEQt3kphvXcBbWBfBgF1qrFhHk3Ajqk9QWHY1qvbkTHsO24NhA&_nc_ht=scontent.ffra1-1.fna&oh=d3130c6383a0723eb8d4f15e3c6fc684&oe=5D340494\"\n\t\t\t\t\tdistance=\"1900\"\n\t\t\t\t/>\n\t\t\t\t<Location\n\t\t\t\t\tdestination=\"Off-Sonar (Barcelona)\"\n\t\t\t\t\tcountry=\"Spain\"\n\t\t\t\t\tphoto=\"https://scontent.ffra1-1.fna.fbcdn.net/v/t31.0-8/19144167_1585129298163767_8216604057020465419_o.jpg?_nc_cat=103&_nc_eui2=AeHhpBq5QhGe4lohWIuclbJmqw4KEaoSIxUgsD9WuuTpSeMHo4IcUxnACjXpzTAHKSlleluOK7f916OVY0V5cUN3eSuztzg7fDA_qKV25d8YCw&_nc_ht=scontent.ffra1-1.fna&oh=9f6f1962d7582113164939c0434ddf81&oe=5D3FAABF\"\n\t\t\t\t\tdistance=\"1800\"\n\t\t\t\t/>\n\t\t\t\t<Location\n\t\t\t\t\tdestination=\"Dimensions (Pula)\"\n\t\t\t\t\tcountry=\"Croatia\"\n\t\t\t\t\tphoto=\"https://scontent.ffra1-1.fna.fbcdn.net/v/t1.0-9/41320074_10217740660287508_9047793086599528448_n.jpg?_nc_cat=109&_nc_eui2=AeFz24XbUrN15MftW5nR7iVNZxN9C0DDx_SBPgA2Tw1hHMUpY1qyaTjmyr_k565JIBsr0jI5xBsqooq_Uu9Z3xWs_TbvL7PoMpvhvv8tIg4Weg&_nc_ht=scontent.ffra1-1.fna&oh=3f292136add482145c57f42521c5b268&oe=5D378ABE\"\n\t\t\t\t\tdistance=\"1100\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}